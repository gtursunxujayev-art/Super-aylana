generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  tgid      String   @unique
  login     String   @unique
  name      String
  password  String
  role      Role     @default(USER)
  balance   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rewards   Reward[]
  txns      CoinTxn[]
  spins     SpinAudit[]
}

model Item {
  id        String   @id @default(cuid())
  name      String
  price     Int
  imageUrl  String?
  active    Boolean  @default(true)
  /** Base weight used when item price == mode (for odds editor) */
  weight    Int      @default(10)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rewards   Reward[]
  stores    StoreItem[]
}

model Reward {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  item      Item?    @relation(fields: [itemId], references: [id])
  itemId    String?
  mode      Int
  result    String   // "another_spin" or item name or "buy:<name>"
  imageUrl  String?
  status    RewardStatus @default(PENDING)
  createdAt DateTime @default(now())
}

model StoreItem {
  id        String   @id @default(cuid())
  item      Item     @relation(fields: [itemId], references: [id])
  itemId    String
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
}

model CoinTxn {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  delta     Int
  reason    String?
  createdAt DateTime @default(now())
}

model GiftCode {
  id             String   @id @default(cuid())
  code           String   @unique
  amount         Int
  maxRedemptions Int      @default(1)
  redeemedCount  Int      @default(0)
  active         Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model SpinAudit {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  mode      Int
  seed      String   // server RNG seed
  entries   Json     // entries + weights snapshot
  picked    String   // picked entry name / id
  createdAt DateTime @default(now())
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

enum RewardStatus {
  PENDING
  DELIVERED
}
