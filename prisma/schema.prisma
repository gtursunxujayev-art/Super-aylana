// ---------- Prisma Client ----------
generator client {
  provider = "prisma-client-js"
}

// ---------- Database ----------
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- Models ----------
model User {
  id           String          @id @default(cuid())
  tgId         String          @unique
  username     String          @unique
  passwordHash String?
  balance      Int             @default(0)
  isAdmin      Boolean         @default(false)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  // Relations
  wins           Win[]
  spins          Spin[]
  balanceEvents  BalanceEvent[]
}

model Prize {
  id          String  @id @default(cuid())
  title       String
  coinCost    Int
  imageUrl    String?
  active      Boolean @default(true)
  showInStore Boolean @default(true)

  // Relations
  wins Win[]

  @@unique([title, coinCost]) // helps prevent duplicates in the store
}

model Win {
  id        String   @id @default(cuid())
  userId    String
  prizeId   String?
  title     String
  createdAt DateTime @default(now())

  user   User  @relation(fields: [userId], references: [id])
  prize  Prize @relation(fields: [prizeId], references: [id])
}

model Spin {
  id        String   @id @default(cuid())
  userId    String
  tier      Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model SpinState {
  /// Single row with id = 'global'
  id          String   @id
  status      String   @default("IDLE")
  spinStartAt DateTime @default(now())
  durationMs  Int      @default(0)
  tier        Int      @default(0)
  userName    String   @default("")
  resultTitle String   @default("")
  updatedAt   DateTime @updatedAt
}

model BalanceEvent {
  id        String   @id @default(cuid())
  userId    String
  delta     Int       // positive or negative
  reason    String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])
}
