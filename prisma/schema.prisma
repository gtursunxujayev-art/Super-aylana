// prisma/schema.prisma
// Safe for `prisma db push` on an existing database with legacy rows & columns.
// Legacy fields/tables are kept with @ignore / @@ignore so nothing gets dropped.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String         @id @default(cuid())

  // Legacy columns (present in DB). Keep so Prisma won't drop them.
  // Mark @ignore so they are not exposed/managed by Prisma Client.
  isAdmin       Boolean?       @default(false) @ignore
  visible       Boolean?       @default(true)  @ignore

  // Keep optional to avoid NOT NULL migrations on old rows
  tgId          String?        @unique
  username      String?
  passwordHash  String?

  balance       Int            @default(0)
  role          Role           @default(USER)

  createdAt     DateTime       @default(now())
  // default(now()) allows backfill; @updatedAt keeps it fresh
  updatedAt     DateTime       @updatedAt @default(now())

  // Relations
  spins         Win[]
  balanceEvents BalanceEvent[]
}

model Prize {
  id          String    @id @default(cuid())
  title       String
  coinCost    Int
  imageUrl    String?
  active      Boolean   @default(true)
  showInStore Boolean   @default(true)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt @default(now())

  wins        Win[]

  // Add later once data is clean:
  // @@unique([title, coinCost])
}

model Win {
  id         String    @id @default(cuid())

  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  // May be null (e.g., “no prize / try again”)
  prizeId    String?
  prize      Prize?    @relation(fields: [prizeId], references: [id], onDelete: SetNull)

  title      String

  // Default so adding this to an existing table with rows is safe
  tier       Int       @default(0)

  createdAt  DateTime  @default(now())
}

model BalanceEvent {
  id         String    @id @default(cuid())

  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  delta      Int
  reason     String?
  createdAt  DateTime  @default(now())
}

// Keep legacy row valid by NOT forcing NOT NULL where legacy NULLs already exist.
model SpinState {
  id           String    @id @default("global")
  status       String    @default("IDLE")     // IDLE | SPINNING

  // Optional with defaults so existing NULLs are OK and new rows have values.
  spinStartAt  DateTime? @default(now())
  durationMs   Int?      @default(0)
  tier         Int?      @default(0)

  // Optional text fields with safe defaults
  userName     String    @default("")
  resultTitle  String    @default("")

  updatedAt    DateTime  @updatedAt @default(now())
}

/**
 * Legacy table present in DB. Keep it so Prisma DOES NOT try to drop it.
 * Marked @@ignore so it’s not exposed/managed by Prisma Client.
 * You don’t need to list all columns here; a minimal shape is fine when ignored.
 */
model Spin {
  id String @id @default(cuid())
  @@ignore
}