// Prisma Client generator
generator client {
  provider = "prisma-client-js"
}

// Your Postgres datasource
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ------------------------------
// User accounts
// ------------------------------
model User {
  id            String   @id @default(cuid())
  username      String   @unique
  passwordHash  String?
  tgId          String?               // keep optional because existing rows had NULL
  balance       Int      @default(0)

  // kept from legacy DB so we don't try to drop these columns
  isAdmin       Boolean  @default(false)
  visible       Boolean  @default(true)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt

  // relations
  wins          Win[]
  balanceEvents BalanceEvent[]
}

// ------------------------------
// Prizes shown in store / wheel
// ------------------------------
model Prize {
  id         String   @id @default(cuid())
  title      String
  coinCost   Int
  imageUrl   String?
  active     Boolean  @default(true)
  showInStore Boolean @default(true)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  // relations
  wins       Win[]

  // you were warned previously about adding this — keep it in schema for login/store logic;
  // clean duplicates in DB before pushing, or use --accept-data-loss if you understand the risk.
  @@unique([title, coinCost])
}

// ------------------------------
// Each win (wheel result, etc.)
// ------------------------------
model Win {
  id         String   @id @default(cuid())

  userId     String
  user       User     @relation(fields: [userId], references: [id])

  prizeId    String?
  prize      Prize?   @relation(fields: [prizeId], references: [id])

  title      String              // text shown to the user (e.g., prize name or message)
  tier       Int      @default(0) // 50 | 100 | 200, default ensures db push can backfill
  coinDelta  Int?                // +/- coins granted (optional)
  createdAt  DateTime @default(now())
}

// ------------------------------
// Balance change audit
// ------------------------------
model BalanceEvent {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  amount    Int
  reason    String?
  createdAt DateTime @default(now())
}

// ------------------------------
// Global spin state (single row with id='global')
// Defaults let `db push` fill existing NULLs.
// ------------------------------
model SpinState {
  id          String   @id
  status      String   @default("IDLE")   // IDLE | SPINNING
  spinStartAt DateTime @default(now())
  durationMs  Int      @default(0)
  tier        Int      @default(0)
  userName    String   @default("")
  resultTitle String   @default("")
  updatedAt   DateTime @default(now()) @updatedAt
}

// ------------------------------
// Legacy table present in DB — keep to avoid drops.
// Not exposed in Prisma Client.
// ------------------------------
model Spin {
  id String @id @default(cuid())

  @@ignore
}