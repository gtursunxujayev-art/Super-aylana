generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  tgId          String         @unique
  username      String
  createdAt     DateTime       @default(now())
  balance       Int            @default(0)
  visible       Boolean        @default(true)

  spins         Spin[]
  wins          Win[]
  balanceEvents BalanceEvent[]
}

model Prize {
  id          String  @id @default(cuid())
  title       String
  coinCost    Int
  imageUrl    String?
  active      Boolean @default(true)
  showInStore Boolean @default(false)
  createdAt   DateTime @default(now())

  // üîÅ back-relation to Win (this was missing)
  wins        Win[]

  @@unique([title, coinCost], name: "title_coinCost")
}

model Spin {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  tier       Int
  startedAt  DateTime @default(now())
  durationMs Int
  result     String?
  completed  Boolean  @default(false)
}

model Win {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  prizeId   String?
  prize     Prize?   @relation(fields: [prizeId], references: [id]) // opposite = Prize.wins

  title     String
  imageUrl  String?
  createdAt DateTime @default(now())
}

model BalanceEvent {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  delta     Int
  reason    String
  createdAt DateTime @default(now())
}

model SpinState {
  id          String   @id // always 'global'
  status      String   // 'IDLE' | 'SPINNING'
  spinStartAt DateTime?
  durationMs  Int?
  tier        Int?
  userName    String?
  resultTitle String?
  updatedAt   DateTime @updatedAt
}